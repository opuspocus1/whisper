#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Traductor de Voz en Tiempo Real - Espa√±ol a Ingl√©s
Usando OpenAI Whisper + ElevenLabs

Ejecuci√≥n principal de la aplicaci√≥n
"""

import sys
import os
import logging
from pathlib import Path

# Agregar directorio actual al path
sys.path.insert(0, str(Path(__file__).parent))

def check_dependencies():
    """Verificar dependencias cr√≠ticas"""
    missing_deps = []
    
    # Verificar dependencias b√°sicas
    try:
        import tkinter
    except ImportError:
        missing_deps.append('tkinter')
    
    try:
        import numpy
    except ImportError:
        missing_deps.append('numpy')
    
    try:
        import sounddevice
    except ImportError:
        missing_deps.append('sounddevice')
    
    try:
        import requests
    except ImportError:
        missing_deps.append('requests')
    
    # Verificar Whisper (faster-whisper)
    try:
        from faster_whisper import WhisperModel
    except ImportError:
        missing_deps.append('faster-whisper')
    
    if missing_deps:
        print("‚ùå Dependencias faltantes:")
        for dep in missing_deps:
            print(f"   - {dep}")
        print("\nüí° Ejecuta: pip install -r requirements.txt")
        return False
    
    return True

def setup_logging():
    """Configurar sistema de logging"""
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_dir / 'voice_translator.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    
    # Reducir verbosidad de algunas librer√≠as
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('requests').setLevel(logging.WARNING)
    logging.getLogger('faster_whisper').setLevel(logging.WARNING)

def show_welcome():
    """Mostrar mensaje de bienvenida"""
    print("\n" + "="*60)
    print("üé§ TRADUCTOR DE VOZ EN TIEMPO REAL üîä")
    print("   Espa√±ol ‚Üí Ingl√©s")
    print("   Powered by OpenAI Whisper + ElevenLabs")
    print("="*60)
    print("\nüìã Caracter√≠sticas:")
    print("   ‚Ä¢ Reconocimiento de voz en espa√±ol (Whisper)")
    print("   ‚Ä¢ Traducci√≥n autom√°tica")
    print("   ‚Ä¢ S√≠ntesis de voz en ingl√©s (ElevenLabs)")
    print("   ‚Ä¢ Interfaz gr√°fica intuitiva")
    print("\nüéØ Atajos de teclado:")
    print("   ‚Ä¢ F1: Iniciar/Detener grabaci√≥n")
    print("   ‚Ä¢ F2: Reproducir traducci√≥n")
    print("   ‚Ä¢ F3: Limpiar textos")
    print("   ‚Ä¢ Ctrl+S: Guardar traducci√≥n")
    print("   ‚Ä¢ Ctrl+Q: Salir")
    print("\nüöÄ Iniciando aplicaci√≥n...\n")

def main():
    """Funci√≥n principal"""
    try:
        # Mostrar bienvenida
        show_welcome()
        
        # Verificar dependencias
        print("üîç Verificando dependencias...")
        if not check_dependencies():
            print("\n‚ùå No se puede continuar sin las dependencias requeridas.")
            input("\nPresiona Enter para salir...")
            return 1
        
        print("‚úÖ Todas las dependencias est√°n disponibles")
        
        # Configurar logging
        setup_logging()
        logger = logging.getLogger(__name__)
        
        logger.info("=" * 50)
        logger.info("Iniciando Traductor de Voz en Tiempo Real")
        logger.info("=" * 50)
        
        # Importar y ejecutar GUI
        print("üé® Cargando interfaz gr√°fica...")
        
        try:
            from main_gui import VoiceTranslatorGUI
            
            # Crear y ejecutar aplicaci√≥n
            app = VoiceTranslatorGUI()
            logger.info("GUI inicializada correctamente")
            
            print("‚úÖ Aplicaci√≥n lista. ¬°Disfruta traduciendo!")
            app.run()
            
        except ImportError as e:
            logger.error(f"Error importando GUI: {e}")
            print(f"‚ùå Error cargando interfaz: {e}")
            return 1
        
        except Exception as e:
            logger.error(f"Error en GUI: {e}")
            print(f"‚ùå Error en la aplicaci√≥n: {e}")
            return 1
        
        logger.info("Aplicaci√≥n cerrada correctamente")
        return 0
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Aplicaci√≥n interrumpida por el usuario")
        return 0
    
    except Exception as e:
        print(f"\n‚ùå Error fatal: {e}")
        logging.error(f"Error fatal: {e}", exc_info=True)
        input("\nPresiona Enter para salir...")
        return 1

if __name__ == "__main__":
    sys.exit(main())