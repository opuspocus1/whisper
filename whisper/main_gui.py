# -*- coding: utf-8 -*-
"""
Interfaz gr√°fica principal para el traductor de voz en tiempo real
Espa√±ol a Ingl√©s usando Whisper + ElevenLabs
"""

# Importar parches de compatibilidad primero
import httpcore_compat

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import threading
import time
import queue
import logging
from pathlib import Path
import json
import os
from typing import Optional, Dict, Any
import numpy as np
from concurrent.futures import ThreadPoolExecutor

# Importar componentes del proyecto
from config import config, Config
from audio_manager import AudioManager
from whisper_handler import WhisperHandler
from faster_whisper_handler import FasterWhisperHandler
from tts_manager import TTSManager
from kokoro_handler import OptimizedKokoroHandler

from translator import Translator
from deepseek_handler import DeepSeekHandler

class VoiceTranslatorGUI:
    """Interfaz gr√°fica principal del traductor de voz"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # Configuraci√≥n
        self.ui_config = config.get_ui_config()
        
        # Estados
        self.is_recording = False
        self.is_processing = False
        self.is_playing = False
        
        # Configuraci√≥n din√°mica de Whisper
        self.whisper_task = "transcribe"  # Por defecto: modo IA habilitado
        
        # Componentes del sistema
        self.audio_manager = None
        self.whisper_handler = None
        self.tts_manager = None
        self.kokoro_handler = None
        self.translator = None
        
        # Performance monitoring
        self.performance_stats = {}
        self.timing_history = []
        
        # Parallel processing
        self.enable_parallel_processing = True
        self.processing_executor = ThreadPoolExecutor(max_workers=3, thread_name_prefix="ParallelProc")
        
        # Cola de mensajes para UI
        self.ui_queue = queue.Queue()
        
        # Crear ventana principal
        self.root = tk.Tk()
        self.setup_window()
        self.setup_styles()
        self.create_widgets()
        
        # Inicializar componentes
        self.initialize_components()
        
        # Configurar eventos
        self.setup_events()
        
        # Iniciar procesamiento de cola UI
        self.process_ui_queue()
        
        # Iniciar actualizaci√≥n peri√≥dica de estad√≠sticas de rendimiento
        self.update_performance_stats_periodic()
        
        self.logger.info("GUI inicializada")
    
    def setup_window(self):
        """Configurar ventana principal"""
        self.root.title("Traductor de Voz en Tiempo Real - Espa√±ol a Ingl√©s")
        self.root.geometry("800x600")
        self.root.minsize(600, 400)
        
        # Centrar ventana
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (800 // 2)
        y = (self.root.winfo_screenheight() // 2) - (600 // 2)
        self.root.geometry(f"800x600+{x}+{y}")
        
        # Configurar cierre
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def setup_styles(self):
        """Configurar estilos de la interfaz"""
        style = ttk.Style()
        
        # Configurar tema
        available_themes = style.theme_names()
        preferred_theme = self.ui_config.get('theme', 'clam')
        
        if preferred_theme in available_themes:
            style.theme_use(preferred_theme)
        else:
            style.theme_use('clam')
        
        # Estilos personalizados
        style.configure('Title.TLabel', font=('Arial', 16, 'bold'))
        style.configure('Subtitle.TLabel', font=('Arial', 12, 'bold'))
        style.configure('Status.TLabel', font=('Arial', 10))
        style.configure('Record.TButton', font=('Arial', 12, 'bold'))
        style.configure('Action.TButton', font=('Arial', 10))
    
    def create_widgets(self):
        """Crear widgets de la interfaz"""
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configurar grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # T√≠tulo
        title_label = ttk.Label(main_frame, text="Traductor de Voz en Tiempo Real", style='Title.TLabel')
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # === SECCI√ìN DE CONTROL ===
        control_frame = ttk.LabelFrame(main_frame, text="Control de Grabaci√≥n", padding="10")
        control_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        control_frame.columnconfigure(1, weight=1)
        
        # Bot√≥n de grabaci√≥n
        self.record_button = ttk.Button(control_frame, text="üé§ Iniciar Grabaci√≥n", 
                                       style='Record.TButton', command=self.toggle_recording)
        self.record_button.grid(row=0, column=0, padx=(0, 10))
        
        # Estado de grabaci√≥n
        self.status_label = ttk.Label(control_frame, text="Listo para grabar", style='Status.TLabel')
        self.status_label.grid(row=0, column=1, sticky=tk.W)
        
        # Bot√≥n de configuraci√≥n
        config_button = ttk.Button(control_frame, text="‚öôÔ∏è Configuraci√≥n", 
                                  style='Action.TButton', command=self.show_config)
        config_button.grid(row=0, column=2)
        
        # Checkbox para habilitar/deshabilitar traducci√≥n IA
        self.ai_translation_var = tk.BooleanVar(value=True)  # Habilitado por defecto
        self.ai_translation_check = ttk.Checkbutton(control_frame, 
                                                   text="ü§ñ Habilitar traducci√≥n IA",
                                                   variable=self.ai_translation_var,
                                                   command=self.on_ai_translation_toggle)
        self.ai_translation_check.grid(row=1, column=0, columnspan=3, sticky=tk.W, pady=(10, 0))
        
        # === SECCI√ìN DE AUDIO ===
        audio_frame = ttk.LabelFrame(main_frame, text="Configuraci√≥n de Audio", padding="10")
        audio_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        audio_frame.columnconfigure(1, weight=1)
        
        # Dispositivo de entrada
        ttk.Label(audio_frame, text="Micr√≥fono:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        self.input_device_var = tk.StringVar()
        self.input_device_combo = ttk.Combobox(audio_frame, textvariable=self.input_device_var, 
                                              state="readonly", width=40)
        self.input_device_combo.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10))
        self.input_device_combo.bind('<<ComboboxSelected>>', self.on_input_device_changed)
        
        # Dispositivo de salida
        ttk.Label(audio_frame, text="Altavoces:").grid(row=1, column=0, sticky=tk.W, padx=(0, 5))
        self.output_device_var = tk.StringVar()
        self.output_device_combo = ttk.Combobox(audio_frame, textvariable=self.output_device_var, 
                                               state="readonly", width=40)
        self.output_device_combo.grid(row=1, column=1, sticky=(tk.W, tk.E), padx=(0, 10))
        self.output_device_combo.bind('<<ComboboxSelected>>', self.on_output_device_changed)
        
        # Volumen
        ttk.Label(audio_frame, text="Volumen:").grid(row=2, column=0, sticky=tk.W, padx=(0, 5))
        self.volume_var = tk.DoubleVar(value=0.8)
        volume_scale = ttk.Scale(audio_frame, from_=0.0, to=1.0, variable=self.volume_var, 
                                orient=tk.HORIZONTAL, command=self.on_volume_changed)
        volume_scale.grid(row=2, column=1, sticky=(tk.W, tk.E), padx=(0, 10))
        
        self.volume_label = ttk.Label(audio_frame, text="80%")
        self.volume_label.grid(row=2, column=2)
        
        # === SECCI√ìN DE TEXTO ===
        text_frame = ttk.LabelFrame(main_frame, text="Texto y Traducci√≥n", padding="10")
        text_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        text_frame.columnconfigure(0, weight=1)
        text_frame.columnconfigure(1, weight=1)
        text_frame.rowconfigure(1, weight=1)
        
        # Texto original (espa√±ol)
        ttk.Label(text_frame, text="Texto Original (Espa√±ol):", style='Subtitle.TLabel').grid(
            row=0, column=0, sticky=tk.W, padx=(0, 5))
        
        self.original_text = tk.Text(text_frame, height=8, wrap=tk.WORD, font=('Arial', 11))
        self.original_text.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 5))
        
        # Scrollbar para texto original
        original_scroll = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=self.original_text.yview)
        original_scroll.grid(row=1, column=0, sticky=(tk.E, tk.N, tk.S))
        self.original_text.configure(yscrollcommand=original_scroll.set)
        
        # Texto traducido (ingl√©s)
        ttk.Label(text_frame, text="Texto Traducido (Ingl√©s):", style='Subtitle.TLabel').grid(
            row=0, column=1, sticky=tk.W, padx=(5, 0))
        
        self.translated_text = tk.Text(text_frame, height=8, wrap=tk.WORD, font=('Arial', 11))
        self.translated_text.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(5, 0))
        
        # Scrollbar para texto traducido
        translated_scroll = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=self.translated_text.yview)
        translated_scroll.grid(row=1, column=1, sticky=(tk.E, tk.N, tk.S))
        self.translated_text.configure(yscrollcommand=translated_scroll.set)
        
        # === SECCI√ìN DE TIEMPOS DE PROCESAMIENTO ===
        timing_frame = ttk.LabelFrame(main_frame, text="‚ö° Tiempos de Procesamiento en Tiempo Real", padding="10")
        timing_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        timing_frame.columnconfigure(1, weight=1)
        timing_frame.columnconfigure(3, weight=1)
        
        # Primera fila - Tiempos principales
        ttk.Label(timing_frame, text="üé§ Transcripci√≥n:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5))
        self.transcription_time_label = ttk.Label(timing_frame, text="--", font=('Arial', 10, 'bold'))
        self.transcription_time_label.grid(row=0, column=1, sticky=tk.W, padx=(0, 20))
        
        ttk.Label(timing_frame, text="ü§ñ IA/Traducci√≥n:").grid(row=0, column=2, sticky=tk.W, padx=(0, 5))
        self.correction_time_label = ttk.Label(timing_frame, text="--", font=('Arial', 10, 'bold'))
        self.correction_time_label.grid(row=0, column=3, sticky=tk.W)
        
        # Segunda fila - S√≠ntesis y total
        ttk.Label(timing_frame, text="üîä S√≠ntesis:").grid(row=1, column=0, sticky=tk.W, padx=(0, 5))
        self.synthesis_time_label = ttk.Label(timing_frame, text="--", font=('Arial', 10, 'bold'))
        self.synthesis_time_label.grid(row=1, column=1, sticky=tk.W, padx=(0, 20))
        
        ttk.Label(timing_frame, text="‚è±Ô∏è Tiempo Total:").grid(row=1, column=2, sticky=tk.W, padx=(0, 5))
        self.total_time_label = ttk.Label(timing_frame, text="--", font=('Arial', 10, 'bold'), foreground='blue')
        self.total_time_label.grid(row=1, column=3, sticky=tk.W)
        
        # Tercera fila - M√©tricas detalladas de Kokoro
        ttk.Label(timing_frame, text="üöÄ Primer Byte:").grid(row=2, column=0, sticky=tk.W, padx=(0, 5))
        self.first_byte_label = ttk.Label(timing_frame, text="--", font=('Arial', 9, 'bold'), foreground='green')
        self.first_byte_label.grid(row=2, column=1, sticky=tk.W, padx=(0, 20))
        
        ttk.Label(timing_frame, text="üìä Promedio:").grid(row=2, column=2, sticky=tk.W, padx=(0, 5))
        self.avg_latency_label = ttk.Label(timing_frame, text="--", font=('Arial', 9, 'bold'), foreground='purple')
        self.avg_latency_label.grid(row=2, column=3, sticky=tk.W)
        
        # Cuarta fila - Estad√≠sticas de rendimiento
        ttk.Label(timing_frame, text="üìà Requests:").grid(row=3, column=0, sticky=tk.W, padx=(0, 5))
        self.requests_count_label = ttk.Label(timing_frame, text="--", font=('Arial', 9, 'bold'), foreground='orange')
        self.requests_count_label.grid(row=3, column=1, sticky=tk.W, padx=(0, 20))
        
        ttk.Label(timing_frame, text="üéØ P95:").grid(row=3, column=2, sticky=tk.W, padx=(0, 5))
        self.p95_latency_label = ttk.Label(timing_frame, text="--", font=('Arial', 9, 'bold'), foreground='red')
        self.p95_latency_label.grid(row=3, column=3, sticky=tk.W)
        
        # === SECCI√ìN DE ACCIONES ===
        actions_frame = ttk.Frame(main_frame)
        actions_frame.grid(row=5, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        actions_frame.columnconfigure(1, weight=1)
        
        # Botones de acci√≥n
        self.play_button = ttk.Button(actions_frame, text="üîä Reproducir", 
                                     style='Action.TButton', command=self.play_audio, state=tk.DISABLED)
        self.play_button.grid(row=0, column=0, padx=(0, 10))
        
        self.clear_button = ttk.Button(actions_frame, text="üóëÔ∏è Limpiar", 
                                      style='Action.TButton', command=self.clear_text)
        self.clear_button.grid(row=0, column=1, padx=(0, 10))
        
        self.save_button = ttk.Button(actions_frame, text="üíæ Guardar", 
                                     style='Action.TButton', command=self.save_translation)
        self.save_button.grid(row=0, column=2)
        
        # === BARRA DE ESTADO ===
        status_frame = ttk.Frame(main_frame)
        status_frame.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E))
        status_frame.columnconfigure(1, weight=1)
        
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(status_frame, variable=self.progress_var, 
                                           mode='determinate', length=200)
        self.progress_bar.grid(row=0, column=0, padx=(0, 10))
        
        self.status_text = ttk.Label(status_frame, text="Listo")
        self.status_text.grid(row=0, column=1, sticky=tk.W)
        
        # Configurar pesos de filas
        main_frame.rowconfigure(3, weight=1)
    
    def _create_whisper_handler(self):
        """Factory para crear el handler de Whisper apropiado seg√∫n configuraci√≥n"""
        whisper_config = config.get_whisper_config()
        engine = whisper_config.get("engine", "whisper")
        
        if engine == "faster-whisper":
            self.logger.info("Inicializando FasterWhisperHandler")
            return FasterWhisperHandler(config)
        else:
            self.logger.info("Inicializando WhisperHandler (original)")
            return WhisperHandler()
    
    def initialize_components(self):
        """Inicializar componentes del sistema"""
        try:
            # Inicializar AudioManager
            self.update_status("Inicializando sistema de audio...")
            self.audio_manager = AudioManager()
            self.audio_manager.set_callbacks(
                on_audio_data=self.on_audio_data,
                on_error=self.on_audio_error
            )
            
            # Cargar dispositivos de audio
            self.load_audio_devices()
            
            # Inicializar WhisperHandler (usando factory)
            whisper_config = config.get_whisper_config()
            engine = whisper_config.get("engine", "whisper")
            self.update_status(f"Cargando modelo {engine}...")
            
            self.whisper_handler = self._create_whisper_handler()
            self.whisper_handler.set_callbacks(
                on_transcription=self.on_transcription_ready,
                on_error=self.on_whisper_error
            )
            
            # Cargar modelo Whisper
            if not self.whisper_handler.load_model():
                raise RuntimeError(f"No se pudo cargar el modelo {engine}")
            
            # Translator deshabilitado - solo usamos OpenRouter/Qwen para traducci√≥n
            # self.update_status("Inicializando traductor...")
            # self.translator = Translator()
            # self.translator.set_callbacks(
            #     on_translation_ready=self.on_translation_ready,
            #     on_error=self.on_translation_error
            # )
            self.translator = None  # Deshabilitado
            
            # Inicializar DeepSeekHandler
            self.update_status("Inicializando corrector de texto...")
            self.deepseek_handler = DeepSeekHandler()
            
            # Inicializar TTS Manager (reemplaza ElevenLabsHandler)
            self.update_status("Inicializando s√≠ntesis de voz...")
            self.tts_manager = TTSManager()
            self.tts_manager.set_callbacks(
                on_audio_ready=self.on_synthesis_ready,
                on_error=self.on_synthesis_error
            )
            
            # Inicializar KokoroHandler optimizado para latencia
            self.update_status("Inicializando KokoroHandler optimizado...")
            self.kokoro_handler = OptimizedKokoroHandler(
                api_url="http://localhost:5000",
                voice="af_heart",
                max_workers=4,
                connection_pool_size=10,
                chunk_size=512,
                pre_warm_models=True
            )
            self.kokoro_handler.on_audio_ready = self.on_kokoro_synthesis_ready
            self.kokoro_handler.on_error = self.on_kokoro_synthesis_error
            
            self.update_status("Sistema listo")
            
        except Exception as e:
            self.logger.error(f"Error inicializando componentes: {e}")
            self.update_status(f"Error: {e}")
            messagebox.showerror("Error de Inicializaci√≥n", 
                               f"No se pudo inicializar el sistema:\n{e}")
    
    def load_audio_devices(self):
        """Cargar dispositivos de audio disponibles"""
        try:
            # Dispositivos de entrada
            input_devices = self.audio_manager.get_input_devices()
            input_names = [f"{i}: {name}" for i, name in input_devices.items()]
            self.input_device_combo['values'] = input_names
            
            if input_names:
                self.input_device_combo.current(0)
                self.on_input_device_changed()
            
            # Dispositivos de salida
            output_devices = self.audio_manager.get_output_devices()
            output_names = [f"{i}: {name}" for i, name in output_devices.items()]
            self.output_device_combo['values'] = output_names
            
            if output_names:
                self.output_device_combo.current(0)
                self.on_output_device_changed()
            
        except Exception as e:
            self.logger.error(f"Error cargando dispositivos de audio: {e}")
    
    def setup_events(self):
        """Configurar eventos de la interfaz"""
        # Atajos de teclado
        self.root.bind('<F1>', lambda e: self.toggle_recording())
        
        self.root.bind('<F3>', lambda e: self.clear_text())
        self.root.bind('<Control-s>', lambda e: self.save_translation())
        self.root.bind('<Control-q>', lambda e: self.on_closing())
    
    def process_ui_queue(self):
        """Procesar cola de mensajes para UI"""
        try:
            while True:
                message = self.ui_queue.get_nowait()
                message_type = message.get('type')
                
                if message_type == 'status':
                    self.status_text.config(text=message['text'])
                elif message_type == 'progress':
                    self.progress_var.set(message['value'])
                elif message_type == 'transcription':
                    self.display_transcription(message['text'])
                elif message_type == 'translation':
                    self.display_translation(message['text'])
                elif message_type == 'error':
                    self.show_error(message['text'])
                
        except queue.Empty:
            pass
        
        # Programar siguiente verificaci√≥n
        self.root.after(100, self.process_ui_queue)
    
    def update_status(self, text: str):
        """Actualizar texto de estado"""
        self.ui_queue.put({'type': 'status', 'text': text})
    
    def update_progress(self, value: float):
        """Actualizar barra de progreso"""
        self.ui_queue.put({'type': 'progress', 'value': value})
    
    def show_error(self, error_text: str):
        """Mostrar error en la interfaz"""
        self.logger.error(error_text)
        messagebox.showerror("Error", error_text)
    
    def update_timing_display(self, timing_type: str, time_value: float):
        """Actualizar tiempos en la interfaz con formato mejorado"""
        # Mostrar en segundos con 3 decimales para mayor precisi√≥n
        time_text = f"{time_value:.3f}s"
        
        # Para latencias muy bajas, mostrar en milisegundos
        if time_value < 1.0:
            time_text = f"{time_value*1000:.1f}ms"
        
        if timing_type == 'transcription':
            self.transcription_time_label.config(text=time_text, foreground='green')
        elif timing_type == 'correction':
            self.correction_time_label.config(text=time_text, foreground='orange')
        elif timing_type == 'synthesis':
            self.synthesis_time_label.config(text=time_text, foreground='purple')
        elif timing_type == 'total':
            self.total_time_label.config(text=time_text, foreground='blue')
        elif timing_type == 'first_byte':
            self.first_byte_label.config(text=time_text, foreground='green')
        
        # Actualizar estad√≠sticas de rendimiento si hay KokoroHandler
        self.update_performance_stats()
    
    def reset_timing_display(self):
        """Resetear tiempos en la interfaz"""
        self.transcription_time_label.config(text="--", foreground='black')
        self.correction_time_label.config(text="--", foreground='black')
        self.synthesis_time_label.config(text="--", foreground='black')
        self.total_time_label.config(text="--", foreground='black')
        self.first_byte_label.config(text="--", foreground='black')
        self.avg_latency_label.config(text="--", foreground='black')
        self.requests_count_label.config(text="--", foreground='black')
        self.p95_latency_label.config(text="--", foreground='black')
    
    def update_performance_stats(self):
        """Actualizar estad√≠sticas de rendimiento del KokoroHandler"""
        if self.kokoro_handler:
            try:
                stats = self.kokoro_handler.get_performance_stats()
                if stats:
                    # Actualizar etiquetas con estad√≠sticas
                    avg_latency = stats.get('avg_first_byte_latency', 0)
                    total_requests = stats.get('total_requests', 0)
                    p95_latency = stats.get('p95_first_byte_latency', 0)
                    
                    self.avg_latency_label.config(text=f"{avg_latency*1000:.1f}ms", foreground='purple')
                    self.requests_count_label.config(text=str(total_requests), foreground='orange')
                    self.p95_latency_label.config(text=f"{p95_latency*1000:.1f}ms", foreground='red')
                    
                    # Guardar estad√≠sticas para uso posterior
                    self.performance_stats = stats
                    
            except Exception as e:
                self.logger.error(f"Error actualizando estad√≠sticas: {e}")
    
    def update_first_byte_latency(self, latency: float):
        """Actualizar latencia de primer byte espec√≠ficamente"""
        self.update_timing_display('first_byte', latency)
    
    def update_performance_stats_periodic(self):
        """Actualizar estad√≠sticas de rendimiento peri√≥dicamente"""
        try:
            self.update_performance_stats()
        except Exception as e:
            self.logger.error(f"Error en actualizaci√≥n peri√≥dica: {e}")
        
        # Programar pr√≥xima actualizaci√≥n en 2 segundos
        self.root.after(2000, self.update_performance_stats_periodic)
    
    # === EVENTOS DE AUDIO ===
    
    def on_input_device_changed(self, event=None):
        """Cambio de dispositivo de entrada"""
        if self.audio_manager and self.input_device_var.get():
            device_id = int(self.input_device_var.get().split(':')[0])
            self.audio_manager.set_input_device(device_id)
    
    def on_output_device_changed(self, event=None):
        """Cambio de dispositivo de salida"""
        if self.audio_manager and self.output_device_var.get():
            device_id = int(self.output_device_var.get().split(':')[0])
            self.audio_manager.set_output_device(device_id)
    
    def on_volume_changed(self, value):
        """Cambio de volumen"""
        volume = float(value)
        self.volume_label.config(text=f"{int(volume * 100)}%")
        if self.audio_manager:
            self.audio_manager.set_volume(volume)
    
    def toggle_recording(self):
        """Alternar grabaci√≥n"""
        if not self.is_recording:
            self.start_recording()
        else:
            self.stop_recording()
    
    def start_recording(self):
        """Iniciar grabaci√≥n"""
        try:
            if not self.audio_manager:
                raise RuntimeError("Sistema de audio no inicializado")
            
            # Resetear tiempos en la interfaz
            self.reset_timing_display()
            
            # Pasar el callback expl√≠citamente para asegurar que se use
            self.audio_manager.start_recording(callback=self.on_audio_data)
            self.is_recording = True
            
            self.record_button.config(text="‚èπÔ∏è Detener Grabaci√≥n")
            self.status_label.config(text="Grabando...")
            self.update_status("Grabando audio...")
            
            self.logger.info("Grabaci√≥n iniciada")
            
        except Exception as e:
            self.logger.error(f"Error iniciando grabaci√≥n: {e}")
            self.show_error(f"No se pudo iniciar la grabaci√≥n:\n{e}")
    
    def stop_recording(self):
        """Detener grabaci√≥n"""
        try:
            if self.audio_manager:
                self.audio_manager.stop_recording()
            
            self.is_recording = False
            
            self.record_button.config(text="üé§ Iniciar Grabaci√≥n")
            self.status_label.config(text="Procesando...")
            self.update_status("Procesando audio...")
            
            self.logger.info("Grabaci√≥n detenida")
            
        except Exception as e:
            self.logger.error(f"Error deteniendo grabaci√≥n: {e}")
            self.show_error(f"Error deteniendo grabaci√≥n:\n{e}")
    
    def on_audio_data(self, audio_data: np.ndarray, sample_rate: int = None):
        """Callback para datos de audio"""
        if self.whisper_handler and not self.is_processing:
            self.is_processing = True
            
            # Usar sample_rate del AudioManager si se proporciona
            if sample_rate is None:
                sample_rate = self.audio_manager.sample_rate
            
            # Iniciar medici√≥n de tiempo total
            self.process_start_time = time.time()
            self.logger.info(f"Audio recibido para procesamiento: {len(audio_data)} muestras a {sample_rate} Hz")
            self.logger.info("=== INICIANDO PROCESO DE TRADUCCI√ìN ===")
            
            # Procesar en thread separado
            threading.Thread(
                target=self.process_audio_async,
                args=(audio_data, sample_rate),
                daemon=True
            ).start()
    
    def process_audio_async(self, audio_data: np.ndarray, sample_rate: int):
        """Procesar audio de forma as√≠ncrona"""
        try:
            # Iniciar medici√≥n de tiempo de transcripci√≥n
            transcription_start = time.time()
            
            # Transcribir con Whisper
            self.update_status("Transcribiendo audio...")
            self.logger.info(f"Enviando audio a Whisper: {len(audio_data)} muestras a {sample_rate} Hz")
            # Pasar la tarea din√°mica basada en el toggle de traducci√≥n IA
            success = self.whisper_handler.transcribe_async(audio_data, sample_rate=sample_rate, task=self.whisper_task)
            
            if not success:
                self.logger.error("No se pudo agregar audio a la cola de procesamiento")
                self.ui_queue.put({'type': 'error', 'text': "Error: Cola de procesamiento llena"})
                self.is_processing = False
            else:
                self.logger.info("Audio enviado exitosamente a la cola de Whisper")
                # Guardar tiempo de inicio para usar en callback
                self.transcription_start_time = transcription_start
            
        except Exception as e:
            self.logger.error(f"Error procesando audio: {e}")
            self.ui_queue.put({'type': 'error', 'text': f"Error procesando audio: {e}"})
            self.is_processing = False
    
    def on_audio_error(self, error_text: str):
        """Callback para errores de audio"""
        self.ui_queue.put({'type': 'error', 'text': f"Error de audio: {error_text}"})
    
    # === EVENTOS DE TRANSCRIPCI√ìN ===
    
    def on_ai_translation_toggle(self):
        """Callback para el toggle de traducci√≥n IA"""
        is_enabled = self.ai_translation_var.get()
        status = "habilitada" if is_enabled else "deshabilitada"
        self.logger.info(f"Traducci√≥n IA {status}")
        
        # Guardar el modo actual para usar en las opciones de transcripci√≥n
        if is_enabled:
            # Modo IA: Whisper solo transcribe (espa√±ol -> espa√±ol)
            self.whisper_task = "transcribe"
        else:
            # Modo directo: Whisper traduce directamente (espa√±ol -> ingl√©s)
            self.whisper_task = "translate"
        
        self.logger.info(f"Whisper configurado para: {self.whisper_task}")
    
    def on_transcription_ready(self, result: Dict[str, Any]):
        """Callback para transcripci√≥n lista con procesamiento paralelo optimizado"""
        # Calcular tiempo de transcripci√≥n
        if hasattr(self, 'transcription_start_time'):
            transcription_time = time.time() - self.transcription_start_time
            self.logger.info(f"‚è±Ô∏è TRANSCRIPCI√ìN completada en {transcription_time:.2f} segundos")
            self.update_timing_display('transcription', transcription_time)
        
        # El resultado viene directamente de Whisper con 'text', 'language', etc.
        text = result.get('text', '').strip()
        if text and not result.get('error'):
            # Verificar si la traducci√≥n IA est√° habilitada
            ai_translation_enabled = self.ai_translation_var.get()
            
            if self.enable_parallel_processing:
                # Proceso paralelo optimizado
                self.logger.info("üöÄ Usando procesamiento paralelo para traducci√≥n y s√≠ntesis")
                
                def parallel_process():
                    try:
                        if ai_translation_enabled:
                            # Modo IA: Whisper transcribi√≥ espa√±ol -> espa√±ol, usar OpenRouter/Qwen
                            self.ui_queue.put({'type': 'transcription', 'text': text})
                            self.update_status("Traduciendo con IA...")
                            self.correction_start_time = time.time()
                            
                            # Pre-calentar Kokoro mientras se traduce
                            if self.kokoro_handler and hasattr(self.kokoro_handler, '_pre_warm_models_async'):
                                self.kokoro_handler._pre_warm_models_async()
                            
                            self.correct_and_synthesize(text)
                        else:
                            # Modo directo: Whisper ya tradujo espa√±ol -> ingl√©s
                            self.ui_queue.put({'type': 'transcription', 'text': f"[Espa√±ol detectado]"}) 
                            self.ui_queue.put({'type': 'translation', 'text': text})
                            
                            # Marcar tiempo de correcci√≥n como 0 (no se usa IA)
                            self.correction_start_time = time.time()
                            correction_time = 0
                            self.logger.info(f"‚è±Ô∏è TRADUCCI√ìN/IA (modo directo) completada en {correction_time:.2f} segundos")
                            self.update_timing_display('correction', correction_time)
                            
                            # S√≠ntesis paralela con pre-calentamiento
                            self.synthesis_start_time = time.time()
                            self.update_status("Sintetizando voz con Kokoro optimizado...")
                            if self.kokoro_handler:
                                self.kokoro_handler.synthesize_async(
                                    text, 
                                    optimize_for_latency=True,
                                    use_streaming=True
                                )
                            else:
                                self.tts_manager.synthesize_async(text)
                    except Exception as e:
                        self.logger.error(f"Error en procesamiento paralelo: {e}")
                        self.is_processing = False
                
                # Ejecutar en thread pool para evitar bloqueos
                self.processing_executor.submit(parallel_process)
            else:
                # Procesamiento secuencial tradicional
                if ai_translation_enabled:
                    # Modo IA: Whisper transcribi√≥ espa√±ol -> espa√±ol, usar OpenRouter/Qwen
                    self.ui_queue.put({'type': 'transcription', 'text': text})
                    self.update_status("Traduciendo con IA...")
                    self.correction_start_time = time.time()
                    threading.Thread(
                        target=self.correct_and_synthesize,
                        args=(text,),
                        daemon=True
                    ).start()
                else:
                    # Modo directo: Whisper ya tradujo espa√±ol -> ingl√©s, ir directo a s√≠ntesis
                    self.ui_queue.put({'type': 'transcription', 'text': f"[Espa√±ol detectado]"}) 
                    self.ui_queue.put({'type': 'translation', 'text': text})
                    
                    # Marcar tiempo de correcci√≥n como 0 (no se usa IA)
                    self.correction_start_time = time.time()
                    correction_time = 0
                    self.logger.info(f"‚è±Ô∏è TRADUCCI√ìN/IA (modo directo) completada en {correction_time:.2f} segundos")
                    self.update_timing_display('correction', correction_time)
                    
                    # Ir directo a s√≠ntesis con el texto ya traducido por Whisper
                    self.synthesis_start_time = time.time()
                    self.update_status("Sintetizando voz...")
                    self.tts_manager.synthesize_async(text)
        else:
            error_msg = result.get('error', 'No se detect√≥ texto')
            self.update_status(f"Error: {error_msg}")
            self.is_processing = False
    
    def on_whisper_error(self, error_text: str):
        """Callback para errores de Whisper"""
        # Calcular tiempo total incluso en caso de error
        if hasattr(self, 'process_start_time'):
            total_time = time.time() - self.process_start_time
            self.logger.info(f"‚ùå PROCESO TOTAL (con error) completado en {total_time:.2f} segundos")
            self.logger.info("=== FIN DEL PROCESO DE TRADUCCI√ìN (ERROR) ===")
            self.update_timing_display('total', total_time)
        
        self.ui_queue.put({'type': 'error', 'text': f"Error de transcripci√≥n: {error_text}"})
        self.is_processing = False
    
    # === EVENTOS DE S√çNTESIS ===
    
    def on_synthesis_ready(self, result: Dict[str, Any]):
        """Callback para s√≠ntesis de voz lista (TTS Manager)"""
        try:
            if result.get('success', False):
                # Calcular tiempo de s√≠ntesis
                if hasattr(self, 'synthesis_start_time'):
                    synthesis_time = time.time() - self.synthesis_start_time
                    self.logger.info(f"üîä S√çNTESIS (TTS Manager) completada en {synthesis_time:.3f} segundos")
                    self.update_timing_display('synthesis', synthesis_time)
                
                # Reproducir audio si est√° disponible
                if 'audio_path' in result and self.audio_manager:
                    self.audio_manager.play_audio_file(result['audio_path'])
                    self.logger.info("Audio reproducido exitosamente")
                elif 'audio_data' in result and self.audio_manager:
                    # Fallback para compatibilidad
                    if isinstance(result['audio_data'], str):  # Es una ruta de archivo
                        self.audio_manager.play_audio_file(result['audio_data'])
                    else:  # Son datos de audio
                        self.audio_manager.play_audio_data(result['audio_data'])
                    self.logger.info("Audio reproducido exitosamente")
                
                # Calcular tiempo total
                if hasattr(self, 'process_start_time'):
                    total_time = time.time() - self.process_start_time
                    self.logger.info(f"üèÅ PROCESO TOTAL completado en {total_time:.3f} segundos")
                    self.logger.info("=== FIN DEL PROCESO DE TRADUCCI√ìN ===")
                    self.update_timing_display('total', total_time)
                
                self.update_status("Proceso completado")
            else:
                error_msg = result.get('error', 'Error desconocido en s√≠ntesis')
                self.logger.error(f"Error en s√≠ntesis: {error_msg}")
                self.update_status(f"Error en s√≠ntesis: {error_msg}")
                
                # Calcular tiempo total incluso con error
                if hasattr(self, 'process_start_time'):
                    total_time = time.time() - self.process_start_time
                    self.logger.info(f"‚ùå PROCESO TOTAL (con error de s√≠ntesis) completado en {total_time:.3f} segundos")
                    self.update_timing_display('total', total_time)
            
            self.is_processing = False
            
        except Exception as e:
            self.logger.error(f"Error procesando resultado de s√≠ntesis: {e}")
            self.update_status(f"Error procesando s√≠ntesis: {e}")
            self.is_processing = False
    
    def on_kokoro_synthesis_ready(self, result: Dict[str, Any]):
        """Callback para s√≠ntesis de voz lista (KokoroHandler optimizado)"""
        try:
            if result.get('success', False):
                # Calcular tiempo de s√≠ntesis
                if hasattr(self, 'synthesis_start_time'):
                    synthesis_time = time.time() - self.synthesis_start_time
                    self.logger.info(f"üöÄ S√çNTESIS (Kokoro) completada en {synthesis_time:.3f} segundos")
                    self.update_timing_display('synthesis', synthesis_time)
                
                # Actualizar latencia de primer byte si est√° disponible
                if 'latency' in result:
                    latency = result['latency']
                    self.logger.info(f"‚ö° Latencia de primer byte: {latency:.3f}s")
                    self.update_first_byte_latency(latency)
                
                # Reproducir audio si est√° disponible
                if 'audio_path' in result and self.audio_manager:
                    self.audio_manager.play_audio_file(result['audio_path'])
                    self.logger.info("Audio Kokoro reproducido exitosamente")
                elif 'audio_data' in result and self.audio_manager:
                    # Fallback para compatibilidad
                    if isinstance(result['audio_data'], str):  # Es una ruta de archivo
                        self.audio_manager.play_audio_file(result['audio_data'])
                    else:  # Son datos de audio
                        self.audio_manager.play_audio_data(result['audio_data'])
                    self.logger.info("Audio Kokoro reproducido exitosamente")
                
                # Calcular tiempo total
                if hasattr(self, 'process_start_time'):
                    total_time = time.time() - self.process_start_time
                    self.logger.info(f"üèÅ PROCESO TOTAL (Kokoro) completado en {total_time:.3f} segundos")
                    self.logger.info("=== FIN DEL PROCESO DE TRADUCCI√ìN (KOKORO) ===")
                    self.update_timing_display('total', total_time)
                
                self.update_status("Proceso completado (Kokoro optimizado)")
            else:
                error_msg = result.get('error', 'Error desconocido en s√≠ntesis Kokoro')
                self.logger.error(f"Error en s√≠ntesis Kokoro: {error_msg}")
                self.update_status(f"Error en s√≠ntesis Kokoro: {error_msg}")
                
                # Calcular tiempo total incluso con error
                if hasattr(self, 'process_start_time'):
                    total_time = time.time() - self.process_start_time
                    self.logger.info(f"‚ùå PROCESO TOTAL (con error de s√≠ntesis Kokoro) completado en {total_time:.3f} segundos")
                    self.update_timing_display('total', total_time)
            
            self.is_processing = False
            
        except Exception as e:
            self.logger.error(f"Error procesando resultado de s√≠ntesis Kokoro: {e}")
            self.update_status(f"Error procesando s√≠ntesis Kokoro: {e}")
            self.is_processing = False
    
    def on_kokoro_synthesis_error(self, error_text: str):
        """Callback para errores de s√≠ntesis Kokoro"""
        self.logger.error(f"Error de s√≠ntesis Kokoro: {error_text}")
        
        # Calcular tiempo total incluso en caso de error
        if hasattr(self, 'process_start_time'):
            total_time = time.time() - self.process_start_time
            self.logger.info(f"‚ùå PROCESO TOTAL (con error de s√≠ntesis Kokoro) completado en {total_time:.3f} segundos")
            self.logger.info("=== FIN DEL PROCESO DE TRADUCCI√ìN (ERROR KOKORO) ===")
            self.update_timing_display('total', total_time)
        
        self.update_status(f"Error de s√≠ntesis Kokoro: {error_text}")
        self.is_processing = False
    
    def on_synthesis_error(self, error_text: str):
        """Callback para errores de s√≠ntesis"""
        self.logger.error(f"Error de s√≠ntesis: {error_text}")
        
        # Calcular tiempo total incluso en caso de error
        if hasattr(self, 'process_start_time'):
            total_time = time.time() - self.process_start_time
            self.logger.info(f"‚ùå PROCESO TOTAL (con error de s√≠ntesis) completado en {total_time:.2f} segundos")
            self.logger.info("=== FIN DEL PROCESO DE TRADUCCI√ìN (ERROR) ===")
            self.update_timing_display('total', total_time)
        
        self.update_status(f"Error de s√≠ntesis: {error_text}")
        self.is_processing = False
    
    def display_transcription(self, text: str):
        """Mostrar transcripci√≥n en la interfaz"""
        self.original_text.insert(tk.END, f"{text}\n\n")
        self.original_text.see(tk.END)
    
    # === EVENTOS DE TRADUCCI√ìN (DESHABILITADOS) ===
    # Los siguientes m√©todos ya no se usan porque el traductor est√° deshabilitado
    # La traducci√≥n se hace directamente con OpenRouter/Qwen
    
    # def on_translation_ready(self, result: Dict[str, Any]):
    #     """Callback para traducci√≥n lista"""
    #     if result['success']:
    #         self.ui_queue.put({'type': 'translation', 'text': result['translated_text']})
    #         
    #         # Corregir texto con DeepSeek antes de sintetizar
    #         self.update_status("Corrigiendo texto...")
    #         threading.Thread(
    #             target=self.correct_and_synthesize,
    #             args=(result['translated_text'],),
    #             daemon=True
    #         ).start()
    #     else:
    #         self.ui_queue.put({'type': 'error', 'text': f"Error de traducci√≥n: {result['error']}"})
    #         self.is_processing = False
    # 
    # def on_translation_error(self, error_text: str):
    #     """Callback para errores de traducci√≥n"""
    #     self.ui_queue.put({'type': 'error', 'text': f"Error de traducci√≥n: {error_text}"})
    #     self.is_processing = False
    
    def correct_and_synthesize(self, spanish_text: str):
        """Traducir y corregir texto espa√±ol con OpenRouter/Qwen, luego sintetizar con ElevenLabs - Optimizado para paralelo"""
        try:
            # Verificar si OpenRouter/Qwen est√° habilitado
            deepseek_config = config.get_deepseek_config()
            
            if self.enable_parallel_processing:
                # Pre-calentar Kokoro en paralelo mientras se traduce
                kokoro_warmup_future = None
                if self.kokoro_handler and hasattr(self.kokoro_handler, '_pre_warm_models_async'):
                    self.logger.info("üî• Pre-calentando Kokoro en paralelo con traducci√≥n")
                    kokoro_warmup_future = self.processing_executor.submit(
                        self.kokoro_handler._pre_warm_models_async
                    )
            
            if deepseek_config.get('enabled', False) and deepseek_config.get('api_key'):
                # Traducir y corregir texto espa√±ol directamente con OpenRouter/Qwen
                corrected_result = self.deepseek_handler.correct_text(spanish_text)
                
                # Calcular tiempo de correcci√≥n despu√©s de que termine OpenRouter/Qwen
                if hasattr(self, 'correction_start_time'):
                    correction_time = time.time() - self.correction_start_time
                    self.logger.info(f"‚è±Ô∏è TRADUCCI√ìN/IA completada en {correction_time:.2f} segundos")
                    self.update_timing_display('correction', correction_time)
                
                if corrected_result['success']:
                    english_text = corrected_result['corrected_text']
                    self.logger.info(f"Texto traducido y corregido por OpenRouter/Qwen: '{spanish_text}' -> '{english_text}'")
                    
                    # Mostrar traducci√≥n en la UI
                    self.ui_queue.put({
                        'type': 'translation', 
                        'text': english_text
                    })
                    
                    # Usar texto traducido para s√≠ntesis
                    final_text = english_text
                else:
                    self.logger.warning(f"Error traduciendo texto: {corrected_result['error']}")
                    # Usar texto espa√±ol original si hay error
                    final_text = spanish_text
                    self.ui_queue.put({
                        'type': 'translation', 
                        'text': f"[Error - texto original] {spanish_text}"
                    })
            else:
                # OpenRouter/Qwen deshabilitado, usar texto espa√±ol original
                final_text = spanish_text
                
                # Si OpenRouter/Qwen est√° deshabilitado, mostrar tiempo de correcci√≥n como 0
                if hasattr(self, 'correction_start_time'):
                    correction_time = time.time() - self.correction_start_time
                    self.logger.info(f"‚è±Ô∏è TRADUCCI√ìN/IA (deshabilitada) completada en {correction_time:.2f} segundos")
                    self.update_timing_display('correction', correction_time)
                
                self.ui_queue.put({
                    'type': 'translation', 
                    'text': f"[Sin traducci√≥n] {spanish_text}"
                })
            
            # Iniciar medici√≥n de tiempo de s√≠ntesis
            self.synthesis_start_time = time.time()
            
            # Sintetizar voz con texto final usando KokoroHandler optimizado
            self.update_status("Sintetizando voz con Kokoro optimizado...")
            if self.kokoro_handler:
                # Usar KokoroHandler optimizado para mejor rendimiento
                self.kokoro_handler.synthesize_async(
                    final_text, 
                    optimize_for_latency=True
                )
                self.logger.info("üöÄ Usando KokoroHandler optimizado para s√≠ntesis")
            else:
                # Fallback al TTS Manager si KokoroHandler no est√° disponible
                self.tts_manager.synthesize_async(final_text)
                self.logger.info("‚ö†Ô∏è Usando TTS Manager como fallback")
            
        except Exception as e:
            self.logger.error(f"Error en traducci√≥n y s√≠ntesis: {e}")
            # En caso de error, usar texto espa√±ol original
            self.synthesis_start_time = time.time()
            self.update_status("Sintetizando voz con Kokoro optimizado...")
            if self.kokoro_handler:
                self.kokoro_handler.synthesize_async(
                    spanish_text, 
                    optimize_for_latency=True
                )
            else:
                self.tts_manager.synthesize_async(spanish_text)
            # Calcular tiempo total despu√©s de traducci√≥n
            if hasattr(self, 'process_start_time'):
                total_time = time.time() - self.process_start_time
                self.logger.info(f"üèÅ PROCESO TOTAL completado en {total_time:.3f} segundos")
                self.logger.info("=== FIN DEL PROCESO DE TRADUCCI√ìN ===")
                self.update_timing_display('total', total_time)
            self.update_status("Traducci√≥n completada")
            self.is_processing = False
    
    def display_translation(self, text: str):
        """Mostrar traducci√≥n en la interfaz"""
        self.translated_text.insert(tk.END, f"{text}\n\n")
        self.translated_text.see(tk.END)
        self.play_button.config(state=tk.NORMAL)
    
    # S√≠ntesis y reproducci√≥n removidas como solicitado
    
    # === ACCIONES DE INTERFAZ ===
    
    def play_translation(self):
        """Reproducir √∫ltima traducci√≥n"""
        # Obtener √∫ltimo texto traducido
        translated_content = self.translated_text.get("1.0", tk.END).strip()
        
        if not translated_content:
            messagebox.showwarning("Advertencia", "No hay texto traducido para reproducir")
            return
        
        # Obtener √∫ltima l√≠nea no vac√≠a
        lines = [line.strip() for line in translated_content.split('\n') if line.strip()]
        if lines:
            last_translation = lines[-1]
            self.update_status("Sintetizando voz...")
            self.tts_manager.synthesize_async(last_translation)
    
    def clear_text(self):
        """Limpiar textos"""
        self.original_text.delete("1.0", tk.END)
        self.translated_text.delete("1.0", tk.END)
        self.play_button.config(state=tk.DISABLED)
        self.update_status("Textos limpiados")
    
    def save_translation(self):
        """Guardar traducci√≥n a archivo"""
        original_content = self.original_text.get("1.0", tk.END).strip()
        translated_content = self.translated_text.get("1.0", tk.END).strip()
        
        if not original_content and not translated_content:
            messagebox.showwarning("Advertencia", "No hay contenido para guardar")
            return
        
        # Seleccionar archivo
        filename = filedialog.asksaveasfilename(
            defaultextension=".txt",
            filetypes=[("Archivos de texto", "*.txt"), ("Todos los archivos", "*.*")],
            title="Guardar traducci√≥n"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write("=== TRADUCTOR DE VOZ EN TIEMPO REAL ===\n")
                    f.write(f"Fecha: {time.strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                    f.write("=== TEXTO ORIGINAL (ESPA√ëOL) ===\n")
                    f.write(original_content)
                    f.write("\n\n=== TEXTO TRADUCIDO (INGL√âS) ===\n")
                    f.write(translated_content)
                
                self.update_status(f"Guardado en: {filename}")
                messagebox.showinfo("√âxito", f"Traducci√≥n guardada en:\n{filename}")
                
            except Exception as e:
                self.logger.error(f"Error guardando archivo: {e}")
                messagebox.showerror("Error", f"No se pudo guardar el archivo:\n{e}")
    
    def play_audio(self):
        """Reproducir el √∫ltimo audio grabado"""
        try:
            if hasattr(self, 'last_audio_file') and self.last_audio_file:
                if os.path.exists(self.last_audio_file):
                    self.audio_manager.play_audio_file(self.last_audio_file)
                    self.update_status("Reproduciendo audio...")
                else:
                    messagebox.showwarning("Advertencia", "No se encontr√≥ el archivo de audio")
            else:
                messagebox.showinfo("Informaci√≥n", "No hay audio para reproducir")
        except Exception as e:
            self.logger.error(f"Error reproduciendo audio: {e}")
            messagebox.showerror("Error", f"No se pudo reproducir el audio:\n{e}")
    
    def show_config(self):
        """Mostrar ventana de configuraci√≥n"""
        ConfigWindow(self.root, self)
    
    def on_closing(self):
        """Manejar cierre de aplicaci√≥n"""
        try:
            self.logger.info("Cerrando aplicaci√≥n...")
            
            # Detener grabaci√≥n si est√° activa
            if self.is_recording:
                self.stop_recording()
            
            # Limpiar componentes
            if self.audio_manager:
                self.audio_manager.cleanup()
            
            if self.whisper_handler:
                self.whisper_handler.cleanup()
            
            if self.tts_manager:
                self.tts_manager.cleanup()
            
            # if self.translator:
            #     self.translator.cleanup()
            
            # Shutdown thread pool executor
            if hasattr(self, 'processing_executor') and self.processing_executor:
                self.logger.info("Cerrando thread pool executor...")
                self.processing_executor.shutdown(wait=True, cancel_futures=True)
            
            # Guardar configuraci√≥n
            config.save_config()
            
            self.root.destroy()
            
        except Exception as e:
            self.logger.error(f"Error cerrando aplicaci√≥n: {e}")
            self.root.destroy()
    
    def run(self):
        """Ejecutar aplicaci√≥n"""
        try:
            self.root.mainloop()
        except KeyboardInterrupt:
            self.on_closing()

class ConfigWindow:
    """Ventana de configuraci√≥n"""
    
    def __init__(self, parent, main_app):
        self.parent = parent
        self.main_app = main_app
        
        # Crear ventana
        self.window = tk.Toplevel(parent)
        self.window.title("Configuraci√≥n")
        self.window.geometry("600x700")
        self.window.resizable(True, True)
        self.window.minsize(600, 700)
        
        # Centrar ventana
        self.window.transient(parent)
        self.window.grab_set()
        
        # Inicializar variables de TTS
        self.tts_engine_var = tk.StringVar(value="kokoro")
        self.tts_fallback_var = tk.StringVar(value="kokoro")
        self.auto_fallback_var = tk.BooleanVar(value=True)
        
        self.create_widgets()
        self.load_current_config()
    
    def create_widgets(self):
        """Crear widgets de configuraci√≥n"""
        notebook = ttk.Notebook(self.window)
        notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        
        
        # === TAB WHISPER ===
        whisper_frame = ttk.Frame(notebook)
        notebook.add(whisper_frame, text="Whisper")
        
        # Motor de Whisper
        ttk.Label(whisper_frame, text="Motor:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.engine_var = tk.StringVar()
        engine_combo = ttk.Combobox(whisper_frame, textvariable=self.engine_var, 
                                   values=["whisper", "faster-whisper"], width=47, state="readonly")
        engine_combo.grid(row=0, column=1, padx=5, pady=5)
        engine_combo.bind('<<ComboboxSelected>>', self.on_engine_change)
        
        # Descripci√≥n del motor
        self.engine_desc_label = ttk.Label(whisper_frame, text="", wraplength=400, justify=tk.LEFT, foreground='blue')
        self.engine_desc_label.grid(row=1, column=0, columnspan=2, padx=5, pady=(0, 10))
        
        # Modelo
        ttk.Label(whisper_frame, text="Modelo:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=5)
        self.model_var = tk.StringVar()
        model_combo = ttk.Combobox(whisper_frame, textvariable=self.model_var, 
                                  values=["tiny", "base", "small", "medium", "large"], width=47)
        model_combo.grid(row=2, column=1, padx=5, pady=5)
        
        # Configuraci√≥n espec√≠fica de faster-whisper
        self.faster_whisper_frame = ttk.LabelFrame(whisper_frame, text="Configuraci√≥n Faster-Whisper", padding="5")
        self.faster_whisper_frame.grid(row=3, column=0, columnspan=2, sticky=(tk.W, tk.E), padx=5, pady=10)
        
        # Dispositivo
        ttk.Label(self.faster_whisper_frame, text="Dispositivo:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=2)
        self.device_var = tk.StringVar()
        device_combo = ttk.Combobox(self.faster_whisper_frame, textvariable=self.device_var, 
                                   values=["cpu", "cuda"], width=20, state="readonly")
        device_combo.grid(row=0, column=1, padx=5, pady=2)
        
        # Tipo de c√≥mputo
        ttk.Label(self.faster_whisper_frame, text="Tipo de C√≥mputo:").grid(row=0, column=2, sticky=tk.W, padx=5, pady=2)
        self.compute_type_var = tk.StringVar()
        compute_combo = ttk.Combobox(self.faster_whisper_frame, textvariable=self.compute_type_var, 
                                    values=["int8", "float16", "float32"], width=20, state="readonly")
        compute_combo.grid(row=0, column=3, padx=5, pady=2)
        
        # Informaci√≥n de rendimiento
        perf_text = "üöÄ Faster-Whisper: Hasta 4x m√°s r√°pido, menor uso de memoria, traducci√≥n directa ES‚ÜíEN"
        perf_label = ttk.Label(self.faster_whisper_frame, text=perf_text, wraplength=400, justify=tk.LEFT, foreground='green')
        perf_label.grid(row=1, column=0, columnspan=4, padx=5, pady=5)
        
        # Inicialmente ocultar configuraci√≥n de faster-whisper
        self.faster_whisper_frame.grid_remove()
        
        # === TAB QWEN ===
        deepseek_frame = ttk.Frame(notebook)
        notebook.add(deepseek_frame, text="Qwen (OpenRouter)")
        
        # T√≠tulo y descripci√≥n
        title_label = ttk.Label(deepseek_frame, text="Qwen 3 - Correcci√≥n de Texto con IA", font=('Arial', 12, 'bold'))
        title_label.grid(row=0, column=0, columnspan=2, sticky=tk.W, padx=5, pady=(5, 0))
        
        desc_text = "Usa el modelo GRATUITO Qwen 3 via OpenRouter para corregir estructura y gram√°tica."
        desc_label = ttk.Label(deepseek_frame, text=desc_text, wraplength=450, justify=tk.LEFT, foreground='blue')
        desc_label.grid(row=1, column=0, columnspan=2, padx=5, pady=(0, 10))
        
        # Habilitar Qwen
        self.deepseek_enabled_var = tk.BooleanVar()
        deepseek_check = ttk.Checkbutton(deepseek_frame, text="Habilitar correcci√≥n de texto con Qwen 3 (GRATUITO + Fallback de pago)", 
                                        variable=self.deepseek_enabled_var)
        deepseek_check.grid(row=2, column=0, columnspan=2, sticky=tk.W, padx=5, pady=5)
        
        # Sistema de claves duales
        self.use_dual_keys_var = tk.BooleanVar()
        dual_keys_check = ttk.Checkbutton(deepseek_frame, text="Usar sistema de claves duales (API gratuita + API de pago)", 
                                         variable=self.use_dual_keys_var, command=self.on_dual_keys_toggle)
        dual_keys_check.grid(row=3, column=0, columnspan=2, sticky=tk.W, padx=5, pady=5)
        
        # Instrucciones para API Key
        api_info_text = "üîë API Key de OpenRouter (GRATUITA):"
        ttk.Label(deepseek_frame, text=api_info_text, font=('Arial', 10, 'bold')).grid(row=4, column=0, columnspan=2, sticky=tk.W, padx=5, pady=(10, 0))
        
        instructions_text = "1. Ve a https://openrouter.ai/ y reg√≠strate gratis\n2. Ve a 'Keys' y crea una nueva API key\n3. Copia tu API key (empieza con 'sk-or-v1-')"
        instructions_label = ttk.Label(deepseek_frame, text=instructions_text, wraplength=450, justify=tk.LEFT, foreground='green')
        instructions_label.grid(row=5, column=0, columnspan=2, padx=5, pady=(0, 5))
        
        # API Key Gratuita
        ttk.Label(deepseek_frame, text="API Key Gratuita:").grid(row=6, column=0, sticky=tk.W, padx=5, pady=5)
        self.deepseek_api_key_free_var = tk.StringVar()
        self.deepseek_api_key_free_entry = ttk.Entry(deepseek_frame, textvariable=self.deepseek_api_key_free_var, width=50, show="*")
        self.deepseek_api_key_free_entry.grid(row=6, column=1, padx=5, pady=5)
        
        # API Key de Pago (solo visible si se habilita sistema dual)
        self.paid_key_label = ttk.Label(deepseek_frame, text="API Key de Pago:")
        self.paid_key_label.grid(row=7, column=0, sticky=tk.W, padx=5, pady=5)
        self.deepseek_api_key_paid_var = tk.StringVar()
        self.deepseek_api_key_paid_entry = ttk.Entry(deepseek_frame, textvariable=self.deepseek_api_key_paid_var, width=50, show="*")
        self.deepseek_api_key_paid_entry.grid(row=7, column=1, padx=5, pady=5)
        
        # Inicialmente ocultar campos de API de pago
        self.paid_key_label.grid_remove()
        self.deepseek_api_key_paid_entry.grid_remove()
        
        # Mantener compatibilidad con API key √∫nica (legacy)
        self.deepseek_api_key_var = self.deepseek_api_key_free_var  # Alias para compatibilidad
        
        # Modelo Gratuito (siempre visible)
        ttk.Label(deepseek_frame, text="Modelo Gratuito:").grid(row=8, column=0, sticky=tk.W, padx=5, pady=5)
        self.deepseek_model_free_var = tk.StringVar(value="qwen/qwen3-235b-a22b-2507:free")
        deepseek_model_free_entry = ttk.Entry(deepseek_frame, textvariable=self.deepseek_model_free_var, width=50, state="readonly")
        deepseek_model_free_entry.grid(row=8, column=1, padx=5, pady=5)
        
        # Modelo de Pago (solo visible si se habilita sistema dual)
        self.paid_model_label = ttk.Label(deepseek_frame, text="Modelo de Pago:")
        self.paid_model_label.grid(row=9, column=0, sticky=tk.W, padx=5, pady=5)
        self.deepseek_model_paid_var = tk.StringVar(value="qwen/qwen3-235b-a22b-2507")
        self.deepseek_model_paid_entry = ttk.Entry(deepseek_frame, textvariable=self.deepseek_model_paid_var, width=50, state="readonly")
        self.deepseek_model_paid_entry.grid(row=9, column=1, padx=5, pady=5)
        
        # Inicialmente ocultar campos de modelo de pago
        self.paid_model_label.grid_remove()
        self.deepseek_model_paid_entry.grid_remove()
        
        # Mantener compatibilidad con modelo √∫nico (legacy)
        self.deepseek_model_var = self.deepseek_model_free_var  # Alias para compatibilidad
        
        # Informaci√≥n adicional
        info_text = "‚ú® Qwen 3 corrige SOLO estructura y gram√°tica sin agregar informaci√≥n extra.\nüí∞ Modelo GRATUITO con fallback autom√°tico a modelo de pago si se agotan requests gratuitos."
        info_label = ttk.Label(deepseek_frame, text=info_text, wraplength=450, justify=tk.LEFT, foreground='darkgreen')
        info_label.grid(row=10, column=0, columnspan=2, padx=5, pady=10)
        
        # PYTTSX3 ELIMINADO - Causaba problemas de timeout en Windows SAPI5
        
        # === TAB KOKORO VOICE API ===
        kokoro_frame = ttk.Frame(notebook)
        notebook.add(kokoro_frame, text="Kokoro Voice")
        
        # Motor TTS
        ttk.Label(kokoro_frame, text="Motor TTS:").grid(row=0, column=0, sticky=tk.W, padx=5, pady=5)
        self.tts_engine_var = tk.StringVar(value="kokoro")
        tts_engine_combo = ttk.Combobox(kokoro_frame, textvariable=self.tts_engine_var, values=["kokoro"], state="readonly", width=47)
        tts_engine_combo.grid(row=0, column=1, padx=5, pady=5)
        
        # Filtro por g√©nero
        ttk.Label(kokoro_frame, text="G√©nero:").grid(row=1, column=0, sticky=tk.W, padx=5, pady=5)
        self.gender_filter_var = tk.StringVar(value="all")
        gender_combo = ttk.Combobox(kokoro_frame, textvariable=self.gender_filter_var, values=["all", "female", "male"], state="readonly", width=47)
        gender_combo.grid(row=1, column=1, padx=5, pady=5)
        gender_combo.bind("<<ComboboxSelected>>", self.on_gender_change)
        
        # Voz
        ttk.Label(kokoro_frame, text="Voz:").grid(row=2, column=0, sticky=tk.W, padx=5, pady=5)
        self.kokoro_voice_var = tk.StringVar(value="af_bella")
        self.voice_combo = ttk.Combobox(kokoro_frame, textvariable=self.kokoro_voice_var, state="readonly", width=47)
        self.voice_combo.grid(row=2, column=1, padx=5, pady=5)
        self.voice_combo.bind("<<ComboboxSelected>>", self.on_voice_change)
        
        # Velocidad
        ttk.Label(kokoro_frame, text="Velocidad:").grid(row=3, column=0, sticky=tk.W, padx=5, pady=5)
        self.kokoro_speed_var = tk.DoubleVar(value=1.0)
        speed_scale = ttk.Scale(kokoro_frame, from_=0.5, to=2.0, variable=self.kokoro_speed_var, orient=tk.HORIZONTAL)
        speed_scale.grid(row=3, column=1, padx=5, pady=5, sticky=(tk.W, tk.E))
        
        self.kokoro_speed_label = ttk.Label(kokoro_frame, text="1.00x")
        self.kokoro_speed_label.grid(row=3, column=2, padx=5, pady=5)
        
        speed_scale.config(command=self.on_kokoro_speed_change)
        
        # Servidor
        ttk.Label(kokoro_frame, text="Servidor:").grid(row=4, column=0, sticky=tk.W, padx=5, pady=5)
        self.kokoro_host_var = tk.StringVar(value="localhost")
        host_entry = ttk.Entry(kokoro_frame, textvariable=self.kokoro_host_var, width=25)
        host_entry.grid(row=4, column=1, padx=5, pady=5, sticky=tk.W)
        
        ttk.Label(kokoro_frame, text="Puerto:").grid(row=4, column=1, padx=(200, 5), pady=5, sticky=tk.W)
        self.kokoro_port_var = tk.IntVar(value=5000)
        port_entry = ttk.Entry(kokoro_frame, textvariable=self.kokoro_port_var, width=10)
        port_entry.grid(row=4, column=1, padx=(250, 5), pady=5, sticky=tk.W)
        
        # Informaci√≥n
        info_text = "üé§ Kokoro Voice API - S√≠ntesis de voz neural de alta calidad\nüîä Voces en ingl√©s americano y brit√°nico disponibles"
        info_label = ttk.Label(kokoro_frame, text=info_text, wraplength=450, justify=tk.LEFT, foreground='darkblue')
        info_label.grid(row=5, column=0, columnspan=3, padx=5, pady=10)
        
        # Inicializar lista de voces
        self.update_voice_list()
        
        # === BOTONES ===
        button_frame = ttk.Frame(self.window)
        button_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Button(button_frame, text="Guardar", command=self.save_config).pack(side=tk.RIGHT, padx=5)
        ttk.Button(button_frame, text="Cancelar", command=self.window.destroy).pack(side=tk.RIGHT)
    
    
    
    def on_dual_keys_toggle(self):
        """Manejar toggle del sistema de claves duales"""
        if self.use_dual_keys_var.get():
            # Mostrar campos de API de pago
            self.paid_key_label.grid()
            self.deepseek_api_key_paid_entry.grid()
            # Mostrar campos de modelo de pago
            self.paid_model_label.grid()
            self.deepseek_model_paid_entry.grid()
        else:
            # Ocultar campos de API de pago
            self.paid_key_label.grid_remove()
            self.deepseek_api_key_paid_entry.grid_remove()
            # Ocultar campos de modelo de pago
            self.paid_model_label.grid_remove()
            self.deepseek_model_paid_entry.grid_remove()
    
    def on_engine_change(self, event=None):
        """Manejar cambio de motor de Whisper"""
        engine = self.engine_var.get()
        
        if engine == "faster-whisper":
            self.faster_whisper_frame.grid()
            desc_text = "Faster-Whisper: Motor optimizado con mejor rendimiento y menor latencia"
        else:
            self.faster_whisper_frame.grid_remove()
            desc_text = "Whisper Original: Motor est√°ndar de OpenAI con m√°xima compatibilidad"
        
        self.engine_desc_label.config(text=desc_text)
    
    def on_kokoro_speed_change(self, value):
        """Manejar cambio de velocidad de Kokoro"""
        speed = float(value)
        self.kokoro_speed_label.config(text=f"{speed:.2f}x")
    
    def on_gender_change(self, event=None):
        """Manejar cambio de filtro de g√©nero"""
        self.update_voice_list()
    
    def on_voice_change(self, event=None):
        """Manejar cambio de voz seleccionada"""
        voice_display = self.voice_combo.get()
        if ' - ' in voice_display:
            voice_id = voice_display.split(' - ')[0]
            self.kokoro_voice_var.set(voice_id)
            print(f"üé≠ CAMBIO DE VOZ: {voice_id}")
            if hasattr(self.main_app, 'logger') and self.main_app.logger:
                self.main_app.logger.info(f"üé≠ Voz cambiada a: {voice_id}")
            # Actualizar la voz en el TTS Manager
            if hasattr(self.main_app, 'tts_manager') and self.main_app.tts_manager:
                self.main_app.tts_manager.set_voice(voice_id)
                print(f"üé≠ VOZ ENVIADA AL TTS MANAGER: {voice_id}")
    
    def update_voice_list(self):
        """Actualizar lista de voces seg√∫n el filtro de g√©nero"""
        # Definir voces de Kokoro
        kokoro_voices = {
            'af_heart': {'gender': 'female', 'description': 'Heart ‚ù§Ô∏è (US Female)'},
            'af_bella': {'gender': 'female', 'description': 'Bella üî• (US Female)'},
            'af_nicole': {'gender': 'female', 'description': 'Nicole üéß (US Female)'},
            'af_aoede': {'gender': 'female', 'description': 'Aoede (US Female)'},
            'af_kore': {'gender': 'female', 'description': 'Kore (US Female)'},
            'af_sarah': {'gender': 'female', 'description': 'Sarah (US Female)'},
            'af_nova': {'gender': 'female', 'description': 'Nova (US Female)'},
            'af_sky': {'gender': 'female', 'description': 'Sky (US Female)'},
            'af_alloy': {'gender': 'female', 'description': 'Alloy (US Female)'},
            'af_jessica': {'gender': 'female', 'description': 'Jessica (US Female)'},
            'af_river': {'gender': 'female', 'description': 'River (US Female)'},
            'am_michael': {'gender': 'male', 'description': 'Michael (US Male)'},
            'am_fenrir': {'gender': 'male', 'description': 'Fenrir (US Male)'},
            'am_puck': {'gender': 'male', 'description': 'Puck (US Male)'},
            'am_echo': {'gender': 'male', 'description': 'Echo (US Male)'},
            'am_eric': {'gender': 'male', 'description': 'Eric (US Male)'},
            'am_liam': {'gender': 'male', 'description': 'Liam (US Male)'},
            'am_onyx': {'gender': 'male', 'description': 'Onyx (US Male)'},
            'am_santa': {'gender': 'male', 'description': 'Santa (US Male)'},
            'am_adam': {'gender': 'male', 'description': 'Adam (US Male)'},
            'bf_emma': {'gender': 'female', 'description': 'Emma (UK Female)'},
            'bf_isabella': {'gender': 'female', 'description': 'Isabella (UK Female)'},
            'bf_alice': {'gender': 'female', 'description': 'Alice (UK Female)'},
            'bf_lily': {'gender': 'female', 'description': 'Lily (UK Female)'},
            'bm_george': {'gender': 'male', 'description': 'George (UK Male)'},
            'bm_fable': {'gender': 'male', 'description': 'Fable (UK Male)'},
            'bm_lewis': {'gender': 'male', 'description': 'Lewis (UK Male)'},
            'bm_daniel': {'gender': 'male', 'description': 'Daniel (UK Male)'}
        }
        
        # Filtrar voces seg√∫n g√©nero seleccionado
        gender_filter = self.gender_filter_var.get()
        filtered_voices = []
        
        for voice_id, voice_info in kokoro_voices.items():
            if gender_filter == "all" or voice_info['gender'] == gender_filter:
                filtered_voices.append(f"{voice_id} - {voice_info['description']}")
        
        # Actualizar combobox
        self.voice_combo['values'] = filtered_voices
        
        # Mantener selecci√≥n actual si es v√°lida
        current_voice = self.kokoro_voice_var.get()
        current_display = None
        for voice_display in filtered_voices:
            if voice_display.startswith(current_voice):
                current_display = voice_display
                break
        
        if current_display:
            self.voice_combo.set(current_display)
        elif filtered_voices:
            self.voice_combo.set(filtered_voices[0])
            # Extraer ID de voz del display
            voice_id = filtered_voices[0].split(' - ')[0]
            self.kokoro_voice_var.set(voice_id)
    
    def load_current_config(self):
        """Cargar configuraci√≥n actual"""
        # Cargar configuraci√≥n de Kokoro
        kokoro_config = config.get_kokoro_config()
        self.kokoro_voice_var.set(kokoro_config.get('voice', 'af_bella'))
        
        # Cargar velocidad de voz
        speed = kokoro_config.get('speed', 1.0)
        self.kokoro_speed_var.set(speed)
        self.kokoro_speed_label.config(text=f"{speed:.2f}x")
        
        # Cargar configuraci√≥n del servidor
        self.kokoro_host_var.set(kokoro_config.get('server_host', 'localhost'))
        self.kokoro_port_var.set(kokoro_config.get('server_port', 5000))
        
        # Actualizar lista de voces
        self.update_voice_list()
        
        # Cargar configuraci√≥n de Whisper
        whisper_config = config.get_whisper_config()
        self.engine_var.set(whisper_config.get('engine', 'whisper'))
        self.model_var.set(whisper_config.get('model_size', 'base'))
        self.device_var.set(whisper_config.get('device', 'cpu'))
        self.compute_type_var.set(whisper_config.get('compute_type', 'int8'))
        
        # Actualizar UI seg√∫n el motor seleccionado
        self.on_engine_change()
        
        # Cargar configuraci√≥n de Qwen
        deepseek_config = config.get_deepseek_config()
        self.deepseek_enabled_var.set(deepseek_config.get('enabled', True))  # Habilitado por defecto
        
        # Cargar configuraci√≥n de claves duales
        use_dual_keys = deepseek_config.get('use_dual_keys', False)
        self.use_dual_keys_var.set(use_dual_keys)
        
        # Cargar API keys
        if use_dual_keys:
            self.deepseek_api_key_free_var.set(deepseek_config.get('api_key_free', ''))
            self.deepseek_api_key_paid_var.set(deepseek_config.get('api_key_paid', ''))
        else:
            # Compatibilidad con configuraci√≥n antigua
            old_api_key = deepseek_config.get('api_key', '')
            self.deepseek_api_key_free_var.set(old_api_key)
            self.deepseek_api_key_paid_var.set('')
        
        # Cargar modelos
        self.deepseek_model_free_var.set(deepseek_config.get('model_free', 'qwen/qwen3-235b-a22b-2507:free'))
        self.deepseek_model_paid_var.set(deepseek_config.get('model_paid', 'qwen/qwen3-235b-a22b-2507'))
        
        # Mantener compatibilidad con modelo √∫nico (legacy)
        if not use_dual_keys:
            legacy_model = deepseek_config.get('model', 'qwen/qwen3-235b-a22b-2507:free')
            self.deepseek_model_free_var.set(legacy_model)
        
        # Actualizar visibilidad de campos
        self.on_dual_keys_toggle()
        
        # === CARGAR CONFIGURACI√ìN TTS ===
        tts_config = config.get_tts_config()
        
        # Configuraci√≥n general de TTS
        self.tts_engine_var.set(tts_config.get('engine', 'elevenlabs'))
        self.tts_fallback_var.set(tts_config.get('fallback_engine', 'elevenlabs'))
        self.auto_fallback_var.set(tts_config.get('auto_fallback', True))
        
        # PYTTSX3 ELIMINADO - Causaba problemas de timeout en Windows SAPI5
        
        
    
    def save_config(self):
        """Guardar configuraci√≥n"""
        try:
            # Guardar configuraci√≥n de Kokoro
            # Extraer ID de voz del display seleccionado
            voice_display = self.voice_combo.get()
            voice_id = voice_display.split(' - ')[0] if ' - ' in voice_display else self.kokoro_voice_var.get()
            
            config.set('kokoro', 'voice', voice_id)
            config.set('kokoro', 'speed', self.kokoro_speed_var.get())
            config.set('kokoro', 'server_host', self.kokoro_host_var.get())
            config.set('kokoro', 'server_port', self.kokoro_port_var.get())
            config.set('tts', 'engine', 'kokoro')
            
            
            # Guardar configuraci√≥n de Whisper
            config.set('whisper', 'engine', self.engine_var.get())
            config.set('whisper', 'model_size', self.model_var.get())
            config.set('whisper', 'device', self.device_var.get())
            config.set('whisper', 'compute_type', self.compute_type_var.get())
            
            # Guardar configuraci√≥n de Qwen
            config.set('deepseek', 'enabled', self.deepseek_enabled_var.get())
            config.set('deepseek', 'use_dual_keys', self.use_dual_keys_var.get())
            
            if self.use_dual_keys_var.get():
                # Guardar claves duales
                config.set('deepseek', 'api_key_free', self.deepseek_api_key_free_var.get())
                config.set('deepseek', 'api_key_paid', self.deepseek_api_key_paid_var.get())
                # Mantener compatibilidad con api_key antigua
                config.set('deepseek', 'api_key', self.deepseek_api_key_free_var.get())
            else:
                # Modo de clave √∫nica (compatibilidad)
                api_key = self.deepseek_api_key_free_var.get()
                config.set('deepseek', 'api_key', api_key)
                config.set('deepseek', 'api_key_free', api_key)
                config.set('deepseek', 'api_key_paid', '')
            
            # Guardar modelos
            config.set('deepseek', 'model_free', self.deepseek_model_free_var.get())
            config.set('deepseek', 'model_paid', self.deepseek_model_paid_var.get())
            
            # Mantener compatibilidad con modelo √∫nico (legacy)
            if self.use_dual_keys_var.get():
                config.set('deepseek', 'model', self.deepseek_model_free_var.get())
            else:
                config.set('deepseek', 'model', self.deepseek_model_free_var.get())
            
            # Aplicar configuraci√≥n al TTS manager si est√° disponible
            if hasattr(self.main_app, 'tts_manager') and self.main_app.tts_manager:
                # Reinicializar TTS manager con nueva configuraci√≥n
                self.main_app.tts_manager.reload_config()
                
            # Mantener compatibilidad con elevenlabs_handler
            if hasattr(self.main_app, 'elevenlabs_handler') and self.main_app.elevenlabs_handler:
                if hasattr(self.main_app.elevenlabs_handler, 'set_speech_rate'):
                    self.main_app.elevenlabs_handler.set_speech_rate(self.speech_rate_var.get())
                if hasattr(self.main_app.elevenlabs_handler, 'set_voice'):
                    self.main_app.elevenlabs_handler.set_voice(self.voice_var.get())
            
            # Recargar handler de Whisper si cambi√≥ el motor o modelo
            if hasattr(self.main_app, 'whisper_handler') and self.main_app.whisper_handler:
                current_engine = getattr(self.main_app.whisper_handler, 'engine_type', 'whisper')
                current_model = self.main_app.whisper_handler.model_size
                new_engine = self.engine_var.get()
                new_model = self.model_var.get()
                
                # Si cambi√≥ el motor, reinicializar completamente
                if current_engine != new_engine:
                    self.main_app.update_status(f"Cambiando motor: {current_engine} ‚Üí {new_engine}...")
                    # Limpiar handler actual
                    self.main_app.whisper_handler.cleanup()
                    # Crear nuevo handler
                    self.main_app.whisper_handler = self.main_app._create_whisper_handler()
                    self.main_app.whisper_handler.set_callbacks(
                        on_transcription=self.main_app.on_transcription_ready,
                        on_error=self.main_app.on_whisper_error
                    )
                    # Cargar modelo
                    if self.main_app.whisper_handler.load_model():
                        self.main_app.update_status(f"Motor cambiado a '{new_engine}' exitosamente")
                    else:
                        self.main_app.update_status(f"Error cargando motor '{new_engine}'")
                # Si solo cambi√≥ el modelo, recargar
                elif current_model != new_model:
                    self.main_app.update_status(f"Recargando modelo: {current_model} ‚Üí {new_model}...")
                    if self.main_app.whisper_handler.load_model(new_model):
                        self.main_app.update_status(f"Modelo cambiado a '{new_model}' exitosamente")
                    else:
                        self.main_app.update_status(f"Error cargando modelo '{new_model}'")
            
            # Reinicializar OpenRouter handler con nueva configuraci√≥n
            if hasattr(self.main_app, 'deepseek_handler'):
                from deepseek_handler import DeepSeekHandler
                self.main_app.deepseek_handler = DeepSeekHandler()
            
            # === GUARDAR CONFIGURACI√ìN TTS ===
            # Configuraci√≥n general de TTS
            
            
            # PYTTSX3 ELIMINADO - Causaba problemas de timeout en Windows SAPI5
            
            
            
            # Guardar archivo
            config.save_config()
            
            messagebox.showinfo("√âxito", "Configuraci√≥n guardada correctamente")
            self.window.destroy()
            
        except Exception as e:
            messagebox.showerror("Error", f"Error guardando configuraci√≥n:\n{e}")
    
    

def main():
    """Funci√≥n principal"""
    # Configurar logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('voice_translator.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    
    logger = logging.getLogger(__name__)
    logger.info("Iniciando Traductor de Voz en Tiempo Real")
    
    try:
        # Crear y ejecutar aplicaci√≥n
        app = VoiceTranslatorGUI()
        app.run()
        
    except Exception as e:
        logger.error(f"Error fatal: {e}")
        messagebox.showerror("Error Fatal", f"Error fatal en la aplicaci√≥n:\n{e}")
    
    logger.info("Aplicaci√≥n cerrada")

if __name__ == "__main__":
    main()